<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>STL标准模板库</title>
    <link href="/2022/07/01/STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <url>/2022/07/01/STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>根据 @北京大学郭炜 程序设计与算法(一)C语言程序设计课程整理。</p><span id="more"></span><h1 id="STL标准模板库"><a href="#STL标准模板库" class="headerlink" title="STL标准模板库"></a>STL标准模板库</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><h2 id="1-sort排序算法"><a href="#1-sort排序算法" class="headerlink" title="1) sort排序算法"></a>1) sort排序算法</h2><h3 id="从小到大排序"><a href="#从小到大排序" class="headerlink" title="从小到大排序"></a>从小到大排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(数组名+n1, 数组名+n2);<br></code></pre></td></tr></table></figure><p>将数组下标范围为[n1, n2)的元素从小到大排序（如果n1&#x3D;0，则+n1可不写）</p><h3 id="从大到小排序"><a href="#从大到小排序" class="headerlink" title="从大到小排序"></a>从大到小排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(数组名+n1, 数组名+n2, <span class="hljs-built_in">greater</span>&lt;T&gt;());<br><span class="hljs-comment">// T为元素类型</span><br></code></pre></td></tr></table></figure><p>将数组下标范围为[n1, n2)的元素从大到小排序（如果n1&#x3D;0，则+n1可不写）</p><h3 id="按自定义规则排序"><a href="#按自定义规则排序" class="headerlink" title="按自定义规则排序"></a>按自定义规则排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> 结构名<br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> T &amp; a1, <span class="hljs-type">const</span> T &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ...;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// T为元素类型</span><br><span class="hljs-comment">// 自定义结构名和T</span><br><span class="hljs-built_in">sort</span>(数组名+n1, 数组名+n2, 结构名());<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule1</span> <span class="hljs-comment">// 从大到小排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1 &gt; a2;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule2</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">3</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">// 从小到大排序</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;1) &quot;</span>;<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-built_in">rule1</span>()); <span class="hljs-comment">// 从大到小排序</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;2) &quot;</span>;<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-built_in">rule2</span>()); <span class="hljs-comment">// 按个位数从小到大排序</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;2) &quot;</span>;<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果为：</span><br><span class="hljs-comment">1) 3,7,12,21,45,98,</span><br><span class="hljs-comment">2) 98,45,21,12,7,3,</span><br><span class="hljs-comment">3) 21,12,3,45,7,98,</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo2</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">double</span> gpa;<br>&#125;;<br><br>student students[] = &#123;&#123;<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">112</span>,<span class="hljs-number">3.4</span>&#125;, &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">102</span>,<span class="hljs-number">3.8</span>&#125;, &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">117</span>,<span class="hljs-number">3.9</span>&#125;, &#123;<span class="hljs-string">&quot;Ala&quot;</span>,<span class="hljs-number">333</span>,<span class="hljs-number">3.5</span>&#125;, &#123;<span class="hljs-string">&quot;Zero&quot;</span>,<span class="hljs-number">101</span>,<span class="hljs-number">4.0</span>&#125;&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule1</span> <span class="hljs-comment">// 按姓名从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stricmp</span>(s1.name, s2.name) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule2</span> <span class="hljs-comment">// 按id从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> s1.id &lt; s2.id;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule3</span> <span class="hljs-comment">// 按gpa从大到小排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> s1.gpa &gt; s2.gpa;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-二分查找算法"><a href="#2-二分查找算法" class="headerlink" title="2) 二分查找算法"></a>2) 二分查找算法</h2><h3 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h3><h4 id="对从小到大排好序的基本类型数组进行二分查找"><a href="#对从小到大排好序的基本类型数组进行二分查找" class="headerlink" title="对从小到大排好序的基本类型数组进行二分查找"></a>对从小到大排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">binary_search</span>(数组名+n1, 数组名+n2, 值);<br></code></pre></td></tr></table></figure><h4 id="对按自定义规则排好序的基本类型数组进行二分查找"><a href="#对按自定义规则排好序的基本类型数组进行二分查找" class="headerlink" title="对按自定义规则排好序的基本类型数组进行二分查找"></a>对按自定义规则排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">binary_search</span>(数组名+n1, 数组名+n2, 值, 结构名());<br></code></pre></td></tr></table></figure><p>[n1, n2)（如果n1&#x3D;0，则+n1可不写）</p><p>查找成功，返回值为true(1)；否则，返回值为false(0)</p><p>“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo3</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">3</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">6</span>);<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">6</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">12</span>) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">77</span>) &lt;&lt; endl;<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-built_in">rule</span>());<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">6</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">7</span>) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-built_in">rule</span>()) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果为：</span><br><span class="hljs-comment">3,7,12,21,45,98,</span><br><span class="hljs-comment">result: 1</span><br><span class="hljs-comment">result: 0</span><br><span class="hljs-comment">21,12,3,45,7,98,</span><br><span class="hljs-comment">result: 0          排序规则和查找规则不一致，故这个结果没有意义</span><br><span class="hljs-comment">result: 1          “等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><h4 id="对从小到大排好序的基本类型数组进行二分查找-1"><a href="#对从小到大排好序的基本类型数组进行二分查找-1" class="headerlink" title="对从小到大排好序的基本类型数组进行二分查找"></a>对从小到大排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">lower_bound</span>(数组名+n1, 数组名+n2, 值);<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>大于等于“值”</strong>的元素；如果找不到，p指向下标为n2的元素</p><h4 id="对按自定义规则排好序的基本类型数组进行二分查找-1"><a href="#对按自定义规则排好序的基本类型数组进行二分查找-1" class="headerlink" title="对按自定义规则排好序的基本类型数组进行二分查找"></a>对按自定义规则排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">lower_bound</span>(数组名+n1, 数组名+n2, 值, 结构名());<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>按自定义规则可以排在“值”后面</strong>的元素；如果找不到，p指向下标为n2的元素</p><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><h4 id="对从小到大排好序的基本类型数组进行二分查找-2"><a href="#对从小到大排好序的基本类型数组进行二分查找-2" class="headerlink" title="对从小到大排好序的基本类型数组进行二分查找"></a>对从小到大排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">upper_bound</span>(数组名+n1, 数组名+n2, 值);<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>大于“值”</strong>的元素；如果找不到，p指向下标为n2的元素</p><h4 id="对按自定义规则排好序的基本类型数组进行二分查找-2"><a href="#对按自定义规则排好序的基本类型数组进行二分查找-2" class="headerlink" title="对按自定义规则排好序的基本类型数组进行二分查找"></a>对按自定义规则排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">upper_bound</span>(数组名+n1, 数组名+n2, 值, 结构名());<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>按自定义规则必须排在“值”后面</strong>的元素；如果找不到，p指向下标为n2的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo4</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>&#125;;<br>    <br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">7</span>);<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">7</span>); <span class="hljs-comment">// 3,5,5,7,12,21,98,</span><br>    <span class="hljs-type">int</span> *p = <span class="hljs-built_in">lower_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">5</span>);<br>    cout &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p-a &lt;&lt; endl; <span class="hljs-comment">// 5,1</span><br>    p = <span class="hljs-built_in">upper_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">5</span>);<br>    cout &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p-a &lt;&lt; endl; <span class="hljs-comment">// 7,3</span><br>    <br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-built_in">rule</span>());<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">7</span>); <span class="hljs-comment">// 21,12,3,5,5,7,98,</span><br>    <span class="hljs-type">int</span> *q = <span class="hljs-built_in">lower_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">16</span>, <span class="hljs-built_in">rule</span>());<br>    cout &lt;&lt; *q &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; q-a &lt;&lt; endl; <span class="hljs-comment">// 7,5</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">upper_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">18</span>, <span class="hljs-built_in">rule</span>()) == a+<span class="hljs-number">7</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; q-a &lt;&lt; endl; <span class="hljs-comment">// not found</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-平衡二叉树数据结构"><a href="#3-平衡二叉树数据结构" class="headerlink" title="3) 平衡二叉树数据结构"></a>3) 平衡二叉树数据结构</h2><p>有时我们需要在增删数据的同时进行数据查找，希望增加数据、删除数据和查找数据都能在log(n)复杂度下完成</p><p>“容器” “迭代器”</p><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">multiset&lt;T&gt; st;<br></code></pre></td></tr></table></figure><p>这里定义一个multiset变量st，st里面存放数据类型为T的数据，并且能够自动排序</p><p>开始时st为空，可用st.insert添加元素，st.erase删除元素，st.find查找元素（复杂度都是log(n)）</p><p>排序规则：若表达式”a &lt; b”为true，则a排在b前面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo5</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span> <span class="hljs-comment">// 使用multiset和set需要此头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    multiset&lt;<span class="hljs-type">int</span>&gt; st;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(a[i]);<br>    multiset&lt;<span class="hljs-type">int</span>&gt;::iterator i;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    迭代器，相当于指针，指向multiset中的元素，访问multiset中的元素要通过迭代器</span><br><span class="hljs-comment">    multiset, set, multimap, map上的迭代器可++、--、用!=和==比较，但不可比大小、加减整数、相减（与指针的区别）</span><br><span class="hljs-comment">    st.begin()返回值类型为multiset&lt;int&gt;::iterator，是指向st的第一个元素的迭代器</span><br><span class="hljs-comment">    st.end()返回值类型为multiset&lt;int&gt;::iterator，是指向st的最后一个元素后面的迭代器</span><br><span class="hljs-comment">    对迭代器++，其指向下一个元素；对迭代器--，其指向上一个元素</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1, 7, 8, 8, 12, 13, 13, 14, 19, 21,</span><br>    cout &lt;&lt; endl;<br>    <br>    i = st.<span class="hljs-built_in">find</span>(<span class="hljs-number">22</span>); <span class="hljs-comment">// 若找到22，则返回指向该元素的迭代器；否则返回st.end()</span><br>    <span class="hljs-keyword">if</span> (i == st.<span class="hljs-built_in">end</span>())<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：not found</span><br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">22</span>);<br>    i = st.<span class="hljs-built_in">find</span>(<span class="hljs-number">22</span>);<br>    <span class="hljs-keyword">if</span> (i == st.<span class="hljs-built_in">end</span>())<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;found:&quot;</span> &lt;&lt; *i &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：found:22</span><br>    i = st.<span class="hljs-built_in">lower_bound</span>(<span class="hljs-number">13</span>); <span class="hljs-comment">// 返回迭代器p，使得[st.begin(), p)中的元素都在13前面</span><br>    cout &lt;&lt; *i &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：13</span><br>    i = st.<span class="hljs-built_in">upper_bound</span>(<span class="hljs-number">8</span>); <span class="hljs-comment">// 返回迭代器p，使得[p, st.end())中的元素都在8后面</span><br>    cout &lt;&lt; *i &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：12</span><br>    st.<span class="hljs-built_in">erase</span>(i); <span class="hljs-comment">// 注意这里的参数为迭代器</span><br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1, 7, 8, 8, 13, 13, 14, 19, 21, 22,</span><br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo6</span><br><span class="hljs-comment">// 自定义排序规则的multiset用法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    multiset&lt;<span class="hljs-type">int</span>, greater&lt;<span class="hljs-type">int</span>&gt; &gt; st; <span class="hljs-comment">// 从大到小排序</span><br>    <span class="hljs-comment">// &quot;&gt;&gt;&quot;报错：[Error] &#x27;&gt;&gt;&#x27; should be &#x27;&gt; &gt;&#x27; within a nested template argument list</span><br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(a[i]);<br>    multiset&lt;<span class="hljs-type">int</span>, greater&lt;<span class="hljs-type">int</span>&gt; &gt;::iterator i;<br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：21,19,14,13,13,12,8,8,7,1,</span><br>    cout &lt;&lt; endl;<br>    <br>    multiset&lt;<span class="hljs-type">int</span>, rule&gt; st2; <span class="hljs-comment">// 按个位数从小到大排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st2.<span class="hljs-built_in">insert</span>(a[i]);<br>    multiset&lt;<span class="hljs-type">int</span>, rule&gt;::iterator p;<br>    <span class="hljs-keyword">for</span> (p = st2.<span class="hljs-built_in">begin</span>(); p != st2.<span class="hljs-built_in">end</span>(); p++)<br>        cout &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1,21,12,13,13,14,7,8,8,19,</span><br>    <span class="hljs-comment">// 个位数相同、值不同的数的顺序不确定</span><br>    cout &lt;&lt; endl;<br>    <br>    p = st2.<span class="hljs-built_in">find</span>(<span class="hljs-number">133</span>);<br>    cout &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：13</span><br>    <span class="hljs-comment">// “等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo7</span><br><span class="hljs-comment">// 自定义排序规则的multiset用法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br><br>student students[] = &#123;&#123;<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">112</span>,<span class="hljs-number">78</span>&#125;, &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">102</span>,<span class="hljs-number">85</span>&#125;, &#123;<span class="hljs-string">&quot;Ala&quot;</span>,<span class="hljs-number">333</span>,<span class="hljs-number">92</span>&#125;, &#123;<span class="hljs-string">&quot;Zero&quot;</span>,<span class="hljs-number">101</span>,<span class="hljs-number">70</span>&#125;, &#123;<span class="hljs-string">&quot;Cindy&quot;</span>,<span class="hljs-number">102</span>,<span class="hljs-number">78</span>&#125;&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按分数从大到小排序；若分数相等，则按姓名从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s1.score != s2.score)<br>            <span class="hljs-keyword">return</span> s1.score &gt; s2.score;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(s1.name, s2.name) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    multiset&lt;student, rule&gt; st;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(students[i]);<br>    multiset&lt;student, rule&gt;::iterator p;<br>    <span class="hljs-keyword">for</span> (p = st.<span class="hljs-built_in">begin</span>(); p != st.<span class="hljs-built_in">end</span>(); p++)<br>        cout &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;id &lt;&lt; endl;<br>    <br>    student s = &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">85</span>&#125;;<br>    p = st.<span class="hljs-built_in">find</span>(s);<br>    <span class="hljs-keyword">if</span> (p != st.<span class="hljs-built_in">end</span>())<br>        cout &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;id &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果为：</span><br><span class="hljs-comment">92 Ala 333</span><br><span class="hljs-comment">85 Mary 102</span><br><span class="hljs-comment">78 Cindy 102</span><br><span class="hljs-comment">78 Jack 112</span><br><span class="hljs-comment">70 Zero 101</span><br><span class="hljs-comment">85 Mary 102</span><br><span class="hljs-comment">“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">set&lt;T&gt; st;<br></code></pre></td></tr></table></figure><p>set和multiset的区别在于容器里不能有相同元素（“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立）</p><p>所以，set添加元素可能不成功</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo8</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; st;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(a[i]);<br>    cout &lt;&lt; st.<span class="hljs-built_in">size</span>() &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：8</span><br>    set&lt;<span class="hljs-type">int</span>&gt;::iterator i;<br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1,2,3,5,6,7,8,12,</span><br>    cout &lt;&lt; endl;<br>    <br>    pair&lt;set&lt;<span class="hljs-type">int</span>&gt;::iterator, <span class="hljs-type">bool</span>&gt; result = st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    pair&lt;T1, T2&gt;数据类型等价于：</span><br><span class="hljs-comment">    struct &#123;</span><br><span class="hljs-comment">    T1 first;</span><br><span class="hljs-comment">    T2 second;</span><br><span class="hljs-comment">    &#125;;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (! result.second) <span class="hljs-comment">// 条件成立说明插入不成功</span><br>        cout &lt;&lt; *result.first &lt;&lt; <span class="hljs-string">&quot; already exists.&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 若插入不成功，则返回指向容器中已存在的相同元素的迭代器</span><br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; *result.first &lt;&lt; <span class="hljs-string">&quot; inserted.&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 若插入成功，则返回指向该元素的迭代器</span><br>    <span class="hljs-comment">// 输出结果为：2 already exists.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">multimap&lt;T1, T2&gt; mp;<br><span class="hljs-comment">// mp里的元素都是如下类型：</span><br><span class="hljs-keyword">struct</span> &#123;<br>    T1 first; <span class="hljs-comment">// 关键字</span><br>    T2 second; <span class="hljs-comment">// 值</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>multimap里的元素按照first从小到大或自定义规则排序，按照first查找</p><h5 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h5><p>一个学生成绩录入和查询系统，接受以下两种输入：<br>Add name id score<br>Query score</p><p>name是个不超过16字符的字符串，中间没有空格，代表学生姓名；id是个整数，代表学号；score是个整数，表示分数。学号不会重复，分数和姓名都可能重复。</p><p>两种输入交替出现。第一种输入表示要添加一个学生的信息，碰到这种输入，就记下学生的姓名、id和分数；第二种输入表示要查询，碰到这种输入，就输出已有记录中分数比score低的最高分获得者的姓名、学号和分数。如果有多个学生都满足条件，就输出学号最大的那个学生的信息。如果找不到满足条件的学生，则输出”Nobody”。</p><p>输入样例：<br>Add Jack 12 78<br>Query 78<br>Query 81<br>Add Percy 9 81<br>Add Marry 8 81<br>Query 82<br>Add Tom 11 79<br>Query 80<br>Query 81</p><p>输出样例：<br>Nobody<br>Jack 12 78<br>Percy 9 81<br>Tom 11 79<br>Tom 11 79</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo9</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span> <span class="hljs-comment">// 使用multimap和map需要此头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StudentInfo</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> score;<br>    StudentInfo info;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> multimap&lt;<span class="hljs-type">int</span>, StudentInfo&gt; MAP_STD;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MAP_STD mp;<br>    Student st;<br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; cmd) &#123;<br>        <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>            cin &gt;&gt; st.info.name &gt;&gt; st.info.id &gt;&gt; st.score;<br>            mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(st.score, st.info));<br>        &#125; <span class="hljs-comment">// make_pair类似函数，生成一个pair&lt;int, StudentInfo&gt;变量，其first等于st.score，second等于st.info</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> score;<br>            cin &gt;&gt; score;<br>            MAP_STD::iterator p = mp.<span class="hljs-built_in">lower_bound</span>(score);<br>            <span class="hljs-keyword">if</span> (p != mp.<span class="hljs-built_in">begin</span>()) &#123;<br>                p--;<br>                score = p-&gt;first; <span class="hljs-comment">// 为什么是-&gt;first而不是-&gt;score，思考“容器”和“迭代器”的关系</span><br>                MAP_STD::iterator maxp = p;<br>                <span class="hljs-type">int</span> maxid = p-&gt;second.id;<br>                <span class="hljs-keyword">for</span> (; p != mp.<span class="hljs-built_in">begin</span>() &amp;&amp; p-&gt;first == score; p--) &#123;<br>                    <span class="hljs-keyword">if</span> (p -&gt; second.id &gt; maxid) &#123;<br>                        maxp = p;<br>                        maxid = p-&gt;second.id;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 如果上面循环是因为p == mp.begin()而终止，则p指向的元素还要处理</span><br>                <span class="hljs-keyword">if</span> (p-&gt;first == score) &#123;<br>                    <span class="hljs-keyword">if</span> (p-&gt;second.id &gt; maxid) &#123;<br>                        maxp = p;<br>                        maxid = p-&gt;second.id;<br>                    &#125;<br>                &#125;<br>                cout &lt;&lt; maxp-&gt;second.name &lt;&lt; <span class="hljs-string">&quot; &quot;</span><br>                     &lt;&lt; maxp-&gt;second.id &lt;&lt; <span class="hljs-string">&quot; &quot;</span><br>                     &lt;&lt; maxp-&gt;first &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;Nobody&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 如果lower_bound的结果就是mp.begin()，说明没人分数比查询分数低</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map和multimap的区别在于容器里不能有关键字重复的元素（“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立）</p><p>所以，map添加元素可能不成功</p><p>可以使用[ ]，下标为关键字，返回值为first和关键字相同的元素的second</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo10</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    string name;<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br><br>Student students[<span class="hljs-number">5</span>] = &#123;&#123;<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">89</span>&#125;, &#123;<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">74</span>&#125;, &#123;<span class="hljs-string">&quot;Cindy&quot;</span>,<span class="hljs-number">87</span>&#125;, &#123;<span class="hljs-string">&quot;Alysa&quot;</span>,<span class="hljs-number">87</span>&#125;, &#123;<span class="hljs-string">&quot;Micheal&quot;</span>,<span class="hljs-number">98</span>&#125;&#125;;<br><br><span class="hljs-keyword">typedef</span> map&lt;string, <span class="hljs-type">int</span>&gt; MP;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MP mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(students[i].name, students[i].score));<br>    cout &lt;&lt; mp[<span class="hljs-string">&quot;Jack&quot;</span>] &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：89</span><br>    mp[<span class="hljs-string">&quot;Jack&quot;</span>] = <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">for</span> (MP::iterator i = mp.<span class="hljs-built_in">begin</span>(); i != mp.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i-&gt;first &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; i-&gt;second &lt;&lt; <span class="hljs-string">&quot;) &quot;</span>; <span class="hljs-comment">// 输出结果为：(Alysa,87) (Cindy,87) (Jack,60) (Micheal,98) (Tom,74) </span><br>    cout &lt;&lt; endl;<br>    Student st;<br>    st.name = <span class="hljs-string">&quot;Jack&quot;</span>;<br>    st.score = <span class="hljs-number">99</span>;<br>    pair&lt;MP::iterator, <span class="hljs-type">bool</span>&gt; p = mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(st.name, st.score));<br>    <span class="hljs-keyword">if</span> (p.second)<br>        cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; p.first-&gt;first &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p.first-&gt;second &lt;&lt; <span class="hljs-string">&quot;) inserted&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;insertion failed&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-comment">// 输出结果为：insertion failed</span><br>    mp[<span class="hljs-string">&quot;Harry&quot;</span>] = <span class="hljs-number">78</span>; <span class="hljs-comment">// 插入一元素，其first为&quot;Harry&quot;，然后将其second改为78</span><br>    MP::iterator q = mp.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;Harry&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; q-&gt;first &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; q-&gt;second &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：(Harry,78)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h5><p>输入大量单词，每个单词一行，不超过20字符，没有空格。按出现次数从多到少输出这些单词及其出现次数。出现次数相同的，字典序靠前的在前面。</p><p>输入样例：<br>this<br>is<br>ok<br>this<br>plus<br>that<br>is<br>plus<br>plus</p><p>输出样例：<br>plus 3<br>is 2<br>this 2<br>ok 1<br>that 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo11</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Word</span><br>&#123;<br>    <span class="hljs-type">int</span> times;<br>    string wd;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rule</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> Word &amp; w1, <span class="hljs-type">const</span> Word &amp; w2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (w1.times != w2.times)<br>            <span class="hljs-keyword">return</span> w1.times &gt; w2.times;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> w1.wd &lt; w2.wd; <span class="hljs-comment">// 有#include &lt;string&gt;的头文件，可以直接比较</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    set&lt;Word, Rule&gt; st;<br>    map&lt;string, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; s)<br>        mp[s]++; <span class="hljs-comment">// 当map元素值为int类型或者常量时候，默认值为0</span><br>    <span class="hljs-keyword">for</span> (map&lt;string, <span class="hljs-type">int</span>&gt;::iterator i = mp.<span class="hljs-built_in">begin</span>(); i != mp.<span class="hljs-built_in">end</span>(); i++) &#123;<br>        Word tmp;<br>        tmp.wd = i-&gt;first;<br>        tmp.times = i-&gt;second;<br>        st.<span class="hljs-built_in">insert</span>(tmp);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (set&lt;Word, Rule&gt;::iterator i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; i-&gt;wd &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i-&gt;times &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
