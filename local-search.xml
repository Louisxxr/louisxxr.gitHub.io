<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浙大-陈越、何钦铭-数据结构-0.起步能力自测题</title>
    <link href="/2022/07/05/%E6%B5%99%E5%A4%A7-%E9%99%88%E8%B6%8A%E3%80%81%E4%BD%95%E9%92%A6%E9%93%AD-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-0-%E8%B5%B7%E6%AD%A5%E8%83%BD%E5%8A%9B%E8%87%AA%E6%B5%8B%E9%A2%98/"/>
    <url>/2022/07/05/%E6%B5%99%E5%A4%A7-%E9%99%88%E8%B6%8A%E3%80%81%E4%BD%95%E9%92%A6%E9%93%AD-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-0-%E8%B5%B7%E6%AD%A5%E8%83%BD%E5%8A%9B%E8%87%AA%E6%B5%8B%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>这是<strong>浙大-陈越、何钦铭-数据结构</strong>课程的<strong>起步能力自测题</strong>的参考代码，题干见<a href="https://pintia.cn/%E3%80%82">https://pintia.cn/。</a></p><span id="more"></span><h1 id="浙大-陈越、何钦铭-数据结构-0-起步能力自测题"><a href="#浙大-陈越、何钦铭-数据结构-0-起步能力自测题" class="headerlink" title="浙大-陈越、何钦铭-数据结构-0.起步能力自测题"></a>浙大-陈越、何钦铭-数据结构-0.起步能力自测题</h1><h3 id="1-打印沙漏"><a href="#1-打印沙漏" class="headerlink" title="1.打印沙漏"></a>1.打印沙漏</h3><h4 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h4><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">*****<br> ***<br>  *<br> ***<br>*****<br></code></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><p><strong>输入格式:</strong></p><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><p><strong>输出格式:</strong></p><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">19 *<br></code></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs out">*****<br> ***<br>  *<br> ***<br>*****<br>2<br></code></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> c;<br>cin &gt;&gt; n &gt;&gt; c;<br><span class="hljs-type">int</span> max=<span class="hljs-number">1</span>,sum=<span class="hljs-number">1</span>,count=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (sum&lt;=n) &#123;<br>max=<span class="hljs-number">2</span>*count+<span class="hljs-number">1</span>;<br>sum+=<span class="hljs-number">2</span>*max;<br>count++;<br>&#125;<br>sum-=<span class="hljs-number">2</span>*max;<br>max-=<span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> temp=max;<br><span class="hljs-keyword">for</span> (;temp&gt;<span class="hljs-number">0</span>;temp-=<span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(max-temp)/<span class="hljs-number">2</span>;i++)<br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;temp;i++)<br>cout &lt;&lt; c;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">for</span> (temp=<span class="hljs-number">3</span>;temp&lt;=max;temp+=<span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(max-temp)/<span class="hljs-number">2</span>;i++)<br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;temp;i++)<br>cout &lt;&lt; c;<br>cout &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; n-sum &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-素数对猜想"><a href="#2-素数对猜想" class="headerlink" title="2.素数对猜想"></a>2.素数对猜想</h3><h4 id="题干-1"><a href="#题干-1" class="headerlink" title="题干"></a>题干</h4><p>让我们定义<em>d**n</em>为：<em>d**n</em>&#x3D;<em>p**n</em>+1−<em>p**n</em>，其中<em>p**i</em>是第<em>i</em>个素数。显然有<em>d</em>1&#x3D;1，且对于<em>n</em>&gt;1有<em>d**n</em>是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p><p><strong>输入格式:</strong></p><p>输入在一行给出正整数<code>N</code>。</p><p><strong>输出格式:</strong></p><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">20<br></code></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br></code></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n,count=<span class="hljs-number">0</span>,a[<span class="hljs-number">50000</span>];<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++) &#123;<br><span class="hljs-keyword">if</span> (i==<span class="hljs-number">2</span>||i==<span class="hljs-number">3</span>) &#123;<br>a[count]=i;<br>count++;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> j;<br><span class="hljs-keyword">for</span> (j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">sqrt</span>(i))+<span class="hljs-number">1</span>;j++) &#123;<br><span class="hljs-keyword">if</span> (i%j==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (j==<span class="hljs-built_in">int</span>(<span class="hljs-built_in">sqrt</span>(i))+<span class="hljs-number">2</span>) &#123;<br>a[count]=i;<br>count++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (count==<span class="hljs-number">0</span>||count==<span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (j&lt;count) &#123;<br><span class="hljs-keyword">if</span> (a[j]-a[i]==<span class="hljs-number">2</span>)<br>ans++;<br>i++;<br>j++;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-数组元素循环右移问题"><a href="#3-数组元素循环右移问题" class="headerlink" title="3.数组元素循环右移问题"></a>3.数组元素循环右移问题</h3><h4 id="题干-2"><a href="#题干-2" class="headerlink" title="题干"></a>题干</h4><p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（<em>A</em>0<em>A</em>1⋯<em>A**N</em>−1）变换为（<em>A**N</em>−<em>M</em>⋯<em>A**N</em>−1<em>A</em>0<em>A</em>1⋯<em>A**N</em>−<em>M</em>−1）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><p><strong>输入格式:</strong></p><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p><p><strong>输出格式:</strong></p><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">6 2<br>1 2 3 4 5 6<br></code></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">5 6 1 2 3 4<br></code></pre></td></tr></table></figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n,m,a[<span class="hljs-number">205</span>];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> m1;<br>cin &gt;&gt; n &gt;&gt; m1;<br>m=m1%n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>cin &gt;&gt; a[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=n<span class="hljs-number">-1</span>+i;j&gt;=i;j--)<br>a[j+<span class="hljs-number">1</span>]=a[j];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>a[i]=a[n+i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br><span class="hljs-keyword">if</span> (i==n<span class="hljs-number">-1</span>) &#123;<br>cout &lt;&lt; a[i] &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-Have-Fun-with-Numbers"><a href="#4-Have-Fun-with-Numbers" class="headerlink" title="4.Have Fun with Numbers"></a>4.Have Fun with Numbers</h3><h4 id="题干-3"><a href="#题干-3" class="headerlink" title="题干"></a>题干</h4><p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again!</p><p>Now you are suppose to check if there are more numbers with this property. That is, double a given number with <em>k</em> digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p><p><strong>Input Specification:</strong></p><p>Each input contains one test case. Each case contains one positive integer with no more than 20 digits.</p><p><strong>Output Specification:</strong></p><p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not. Then in the next line, print the doubled number.</p><p><strong>Sample Input:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">1234567899<br></code></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">Yes<br>2469135798<br></code></pre></td></tr></table></figure><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> bucket1[<span class="hljs-number">15</span>],bucket2[<span class="hljs-number">15</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> s[<span class="hljs-number">25</span>];<br>cin &gt;&gt; s;<br><span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(s),num[<span class="hljs-number">25</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>num[i]=s[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) &#123;<br><span class="hljs-keyword">if</span> (flag) &#123;<br><span class="hljs-keyword">if</span> (num[i]&lt;=<span class="hljs-number">4</span>) &#123;<br>num[i]=num[i]*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>flag=<span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num[i]=num[i]*<span class="hljs-number">2</span><span class="hljs-number">-9</span>;<br>flag=<span class="hljs-number">1</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (num[i]&lt;=<span class="hljs-number">4</span>) &#123;<br>num[i]=num[i]*<span class="hljs-number">2</span>;<br>flag=<span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>num[i]=num[i]*<span class="hljs-number">2</span><span class="hljs-number">-10</span>;<br>flag=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>cout &lt;&lt; num[i];<br>cout &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) &#123;<br>bucket1[s[i]-<span class="hljs-string">&#x27;0&#x27;</span>]++;<br>bucket2[num[i]]++;<br>&#125;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) &#123;<br><span class="hljs-keyword">if</span> (bucket1[i]!=bucket2[i])<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (i==<span class="hljs-number">10</span>)<br>cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;len;j++)<br>cout &lt;&lt; num[j];<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-Shuffling-Machine"><a href="#5-Shuffling-Machine" class="headerlink" title="5.Shuffling Machine"></a>5.Shuffling Machine</h3><h4 id="题干-4"><a href="#题干-4" class="headerlink" title="题干"></a>题干</h4><p>Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ <strong>automatic shuffling machines</strong>. Your task is to simulate a shuffling machine.</p><p>The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">S1</span></span>, S2, ..., S13, <br><span class="hljs-function"><span class="hljs-title">H1</span></span>, H2, ..., H13, <br><span class="hljs-function"><span class="hljs-title">C1</span></span>, C2, ..., C13, <br><span class="hljs-function"><span class="hljs-title">D1</span></span>, D2, ..., D13, <br>J1, J2<br></code></pre></td></tr></table></figure><p>where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the <em>i</em>-th position is <em>j</em>, it means to move the card from position <em>i</em> to position <em>j</em>. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>K</em> (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.</p><p><strong>Sample Input:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">2<br>36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47<br></code></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5<br></code></pre></td></tr></table></figure><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-type">char</span> sign;<br><span class="hljs-type">int</span> num;<br><span class="hljs-type">int</span> order;<br>&#125; Card;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span><br>&#123;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> Card &amp; a1, <span class="hljs-type">const</span> Card &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> a1.order&lt;a2.order;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Card cards[<span class="hljs-number">54</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">13</span>;i++) &#123;<br>cards[i].sign=<span class="hljs-string">&#x27;S&#x27;</span>;<br>cards[i+<span class="hljs-number">13</span>].sign=<span class="hljs-string">&#x27;H&#x27;</span>;<br>cards[i+<span class="hljs-number">26</span>].sign=<span class="hljs-string">&#x27;C&#x27;</span>;<br>cards[i+<span class="hljs-number">39</span>].sign=<span class="hljs-string">&#x27;D&#x27;</span>;<br>cards[i].num=i+<span class="hljs-number">1</span>;<br>cards[i+<span class="hljs-number">13</span>].num=i+<span class="hljs-number">1</span>;<br>cards[i+<span class="hljs-number">26</span>].num=i+<span class="hljs-number">1</span>;<br>cards[i+<span class="hljs-number">39</span>].num=i+<span class="hljs-number">1</span>;<br>&#125;<br>cards[<span class="hljs-number">52</span>].sign=<span class="hljs-string">&#x27;J&#x27;</span>;<br>cards[<span class="hljs-number">53</span>].sign=<span class="hljs-string">&#x27;J&#x27;</span>;<br>cards[<span class="hljs-number">52</span>].num=<span class="hljs-number">1</span>;<br>cards[<span class="hljs-number">53</span>].num=<span class="hljs-number">2</span>;<br><br><span class="hljs-type">int</span> t,list[<span class="hljs-number">54</span>];<br>cin &gt;&gt; t;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">54</span>;i++)<br>cin &gt;&gt; list[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">54</span>;j++)<br>cards[j].order=list[j];<br><span class="hljs-built_in">sort</span>(cards,cards+<span class="hljs-built_in">sizeof</span>(cards)/<span class="hljs-built_in">sizeof</span>(Card),<span class="hljs-built_in">rule</span>());<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">54</span>;i++) &#123;<br><span class="hljs-keyword">if</span> (i==<span class="hljs-number">53</span>)<br>cout &lt;&lt; cards[i].sign &lt;&lt; cards[i].num &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; cards[i].sign &lt;&lt; cards[i].num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL标准模板库</title>
    <link href="/2022/07/01/STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <url>/2022/07/01/STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>根据 @北京大学郭炜 程序设计与算法(一)C语言程序设计课程整理。</p><span id="more"></span><h1 id="STL标准模板库"><a href="#STL标准模板库" class="headerlink" title="STL标准模板库"></a>STL标准模板库</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><h2 id="1-sort排序算法"><a href="#1-sort排序算法" class="headerlink" title="1) sort排序算法"></a>1) sort排序算法</h2><h3 id="从小到大排序"><a href="#从小到大排序" class="headerlink" title="从小到大排序"></a>从小到大排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(数组名+n1, 数组名+n2);<br></code></pre></td></tr></table></figure><p>将数组下标范围为[n1, n2)的元素从小到大排序（如果n1&#x3D;0，则+n1可不写）</p><h3 id="从大到小排序"><a href="#从大到小排序" class="headerlink" title="从大到小排序"></a>从大到小排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(数组名+n1, 数组名+n2, <span class="hljs-built_in">greater</span>&lt;T&gt;());<br><span class="hljs-comment">// T为元素类型</span><br></code></pre></td></tr></table></figure><p>将数组下标范围为[n1, n2)的元素从大到小排序（如果n1&#x3D;0，则+n1可不写）</p><h3 id="按自定义规则排序"><a href="#按自定义规则排序" class="headerlink" title="按自定义规则排序"></a>按自定义规则排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> 结构名<br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> T &amp; a1, <span class="hljs-type">const</span> T &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ...;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// T为元素类型</span><br><span class="hljs-comment">// 自定义结构名和T</span><br><span class="hljs-built_in">sort</span>(数组名+n1, 数组名+n2, 结构名());<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule1</span> <span class="hljs-comment">// 从大到小排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1 &gt; a2;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule2</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">3</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">// 从小到大排序</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;1) &quot;</span>;<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-built_in">rule1</span>()); <span class="hljs-comment">// 从大到小排序</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;2) &quot;</span>;<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), <span class="hljs-built_in">rule2</span>()); <span class="hljs-comment">// 按个位数从小到大排序</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;2) &quot;</span>;<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">sizeof</span>(a)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果为：</span><br><span class="hljs-comment">1) 3,7,12,21,45,98,</span><br><span class="hljs-comment">2) 98,45,21,12,7,3,</span><br><span class="hljs-comment">3) 21,12,3,45,7,98,</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo2</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">double</span> gpa;<br>&#125;;<br><br>student students[] = &#123;&#123;<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">112</span>,<span class="hljs-number">3.4</span>&#125;, &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">102</span>,<span class="hljs-number">3.8</span>&#125;, &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">117</span>,<span class="hljs-number">3.9</span>&#125;, &#123;<span class="hljs-string">&quot;Ala&quot;</span>,<span class="hljs-number">333</span>,<span class="hljs-number">3.5</span>&#125;, &#123;<span class="hljs-string">&quot;Zero&quot;</span>,<span class="hljs-number">101</span>,<span class="hljs-number">4.0</span>&#125;&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule1</span> <span class="hljs-comment">// 按姓名从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stricmp</span>(s1.name, s2.name) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule2</span> <span class="hljs-comment">// 按id从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> s1.id &lt; s2.id;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule3</span> <span class="hljs-comment">// 按gpa从大到小排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> s1.gpa &gt; s2.gpa;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-二分查找算法"><a href="#2-二分查找算法" class="headerlink" title="2) 二分查找算法"></a>2) 二分查找算法</h2><h3 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h3><h4 id="对从小到大排好序的基本类型数组进行二分查找"><a href="#对从小到大排好序的基本类型数组进行二分查找" class="headerlink" title="对从小到大排好序的基本类型数组进行二分查找"></a>对从小到大排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">binary_search</span>(数组名+n1, 数组名+n2, 值);<br></code></pre></td></tr></table></figure><h4 id="对按自定义规则排好序的基本类型数组进行二分查找"><a href="#对按自定义规则排好序的基本类型数组进行二分查找" class="headerlink" title="对按自定义规则排好序的基本类型数组进行二分查找"></a>对按自定义规则排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">binary_search</span>(数组名+n1, 数组名+n2, 值, 结构名());<br></code></pre></td></tr></table></figure><p>[n1, n2)（如果n1&#x3D;0，则+n1可不写）</p><p>查找成功，返回值为true(1)；否则，返回值为false(0)</p><p>“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo3</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">3</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">6</span>);<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">6</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">12</span>) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">77</span>) &lt;&lt; endl;<br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-built_in">rule</span>());<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">6</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">7</span>) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span> &lt;&lt; <span class="hljs-built_in">binary_search</span>(a, a+<span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-built_in">rule</span>()) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果为：</span><br><span class="hljs-comment">3,7,12,21,45,98,</span><br><span class="hljs-comment">result: 1</span><br><span class="hljs-comment">result: 0</span><br><span class="hljs-comment">21,12,3,45,7,98,</span><br><span class="hljs-comment">result: 0          排序规则和查找规则不一致，故这个结果没有意义</span><br><span class="hljs-comment">result: 1          “等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><h4 id="对从小到大排好序的基本类型数组进行二分查找-1"><a href="#对从小到大排好序的基本类型数组进行二分查找-1" class="headerlink" title="对从小到大排好序的基本类型数组进行二分查找"></a>对从小到大排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">lower_bound</span>(数组名+n1, 数组名+n2, 值);<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>大于等于“值”</strong>的元素；如果找不到，p指向下标为n2的元素</p><h4 id="对按自定义规则排好序的基本类型数组进行二分查找-1"><a href="#对按自定义规则排好序的基本类型数组进行二分查找-1" class="headerlink" title="对按自定义规则排好序的基本类型数组进行二分查找"></a>对按自定义规则排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">lower_bound</span>(数组名+n1, 数组名+n2, 值, 结构名());<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>按自定义规则可以排在“值”后面</strong>的元素；如果找不到，p指向下标为n2的元素</p><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><h4 id="对从小到大排好序的基本类型数组进行二分查找-2"><a href="#对从小到大排好序的基本类型数组进行二分查找-2" class="headerlink" title="对从小到大排好序的基本类型数组进行二分查找"></a>对从小到大排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">upper_bound</span>(数组名+n1, 数组名+n2, 值);<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>大于“值”</strong>的元素；如果找不到，p指向下标为n2的元素</p><h4 id="对按自定义规则排好序的基本类型数组进行二分查找-2"><a href="#对按自定义规则排好序的基本类型数组进行二分查找-2" class="headerlink" title="对按自定义规则排好序的基本类型数组进行二分查找"></a>对按自定义规则排好序的基本类型数组进行二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">upper_bound</span>(数组名+n1, 数组名+n2, 值, 结构名());<br></code></pre></td></tr></table></figure><p>返回值为元素类型指针T* p：*p是查找区间里下标最小的、<strong>按自定义规则必须排在“值”后面</strong>的元素；如果找不到，p指向下标为n2的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo4</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>&#125;;<br>    <br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">7</span>);<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">7</span>); <span class="hljs-comment">// 3,5,5,7,12,21,98,</span><br>    <span class="hljs-type">int</span> *p = <span class="hljs-built_in">lower_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">5</span>);<br>    cout &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p-a &lt;&lt; endl; <span class="hljs-comment">// 5,1</span><br>    p = <span class="hljs-built_in">upper_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">5</span>);<br>    cout &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p-a &lt;&lt; endl; <span class="hljs-comment">// 7,3</span><br>    <br>    <span class="hljs-built_in">sort</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-built_in">rule</span>());<br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-number">7</span>); <span class="hljs-comment">// 21,12,3,5,5,7,98,</span><br>    <span class="hljs-type">int</span> *q = <span class="hljs-built_in">lower_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">16</span>, <span class="hljs-built_in">rule</span>());<br>    cout &lt;&lt; *q &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; q-a &lt;&lt; endl; <span class="hljs-comment">// 7,5</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">upper_bound</span>(a, a+<span class="hljs-number">7</span>, <span class="hljs-number">18</span>, <span class="hljs-built_in">rule</span>()) == a+<span class="hljs-number">7</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; q-a &lt;&lt; endl; <span class="hljs-comment">// not found</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-平衡二叉树数据结构"><a href="#3-平衡二叉树数据结构" class="headerlink" title="3) 平衡二叉树数据结构"></a>3) 平衡二叉树数据结构</h2><p>有时我们需要在增删数据的同时进行数据查找，希望增加数据、删除数据和查找数据都能在log(n)复杂度下完成</p><p>“容器” “迭代器”</p><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">multiset&lt;T&gt; st;<br></code></pre></td></tr></table></figure><p>这里定义一个multiset变量st，st里面存放数据类型为T的数据，并且能够自动排序</p><p>开始时st为空，可用st.insert添加元素，st.erase删除元素，st.find查找元素（复杂度都是log(n)）</p><p>排序规则：若表达式”a &lt; b”为true，则a排在b前面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo5</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span> <span class="hljs-comment">// 使用multiset和set需要此头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    multiset&lt;<span class="hljs-type">int</span>&gt; st;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(a[i]);<br>    multiset&lt;<span class="hljs-type">int</span>&gt;::iterator i;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    迭代器，相当于指针，指向multiset中的元素，访问multiset中的元素要通过迭代器</span><br><span class="hljs-comment">    multiset, set, multimap, map上的迭代器可++、--、用!=和==比较，但不可比大小、加减整数、相减（与指针的区别）</span><br><span class="hljs-comment">    st.begin()返回值类型为multiset&lt;int&gt;::iterator，是指向st的第一个元素的迭代器</span><br><span class="hljs-comment">    st.end()返回值类型为multiset&lt;int&gt;::iterator，是指向st的最后一个元素后面的迭代器</span><br><span class="hljs-comment">    对迭代器++，其指向下一个元素；对迭代器--，其指向上一个元素</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1, 7, 8, 8, 12, 13, 13, 14, 19, 21,</span><br>    cout &lt;&lt; endl;<br>    <br>    i = st.<span class="hljs-built_in">find</span>(<span class="hljs-number">22</span>); <span class="hljs-comment">// 若找到22，则返回指向该元素的迭代器；否则返回st.end()</span><br>    <span class="hljs-keyword">if</span> (i == st.<span class="hljs-built_in">end</span>())<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：not found</span><br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">22</span>);<br>    i = st.<span class="hljs-built_in">find</span>(<span class="hljs-number">22</span>);<br>    <span class="hljs-keyword">if</span> (i == st.<span class="hljs-built_in">end</span>())<br>        cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;found:&quot;</span> &lt;&lt; *i &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：found:22</span><br>    i = st.<span class="hljs-built_in">lower_bound</span>(<span class="hljs-number">13</span>); <span class="hljs-comment">// 返回迭代器p，使得[st.begin(), p)中的元素都在13前面</span><br>    cout &lt;&lt; *i &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：13</span><br>    i = st.<span class="hljs-built_in">upper_bound</span>(<span class="hljs-number">8</span>); <span class="hljs-comment">// 返回迭代器p，使得[p, st.end())中的元素都在8后面</span><br>    cout &lt;&lt; *i &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：12</span><br>    st.<span class="hljs-built_in">erase</span>(i); <span class="hljs-comment">// 注意这里的参数为迭代器</span><br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1, 7, 8, 8, 13, 13, 14, 19, 21, 22,</span><br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo6</span><br><span class="hljs-comment">// 自定义排序规则的multiset用法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按个位数从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a1, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp; a2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a1%<span class="hljs-number">10</span> &lt; a2%<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    multiset&lt;<span class="hljs-type">int</span>, greater&lt;<span class="hljs-type">int</span>&gt; &gt; st; <span class="hljs-comment">// 从大到小排序</span><br>    <span class="hljs-comment">// &quot;&gt;&gt;&quot;报错：[Error] &#x27;&gt;&gt;&#x27; should be &#x27;&gt; &gt;&#x27; within a nested template argument list</span><br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(a[i]);<br>    multiset&lt;<span class="hljs-type">int</span>, greater&lt;<span class="hljs-type">int</span>&gt; &gt;::iterator i;<br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：21,19,14,13,13,12,8,8,7,1,</span><br>    cout &lt;&lt; endl;<br>    <br>    multiset&lt;<span class="hljs-type">int</span>, rule&gt; st2; <span class="hljs-comment">// 按个位数从小到大排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st2.<span class="hljs-built_in">insert</span>(a[i]);<br>    multiset&lt;<span class="hljs-type">int</span>, rule&gt;::iterator p;<br>    <span class="hljs-keyword">for</span> (p = st2.<span class="hljs-built_in">begin</span>(); p != st2.<span class="hljs-built_in">end</span>(); p++)<br>        cout &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1,21,12,13,13,14,7,8,8,19,</span><br>    <span class="hljs-comment">// 个位数相同、值不同的数的顺序不确定</span><br>    cout &lt;&lt; endl;<br>    <br>    p = st2.<span class="hljs-built_in">find</span>(<span class="hljs-number">133</span>);<br>    cout &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：13</span><br>    <span class="hljs-comment">// “等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo7</span><br><span class="hljs-comment">// 自定义排序规则的multiset用法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br><br>student students[] = &#123;&#123;<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">112</span>,<span class="hljs-number">78</span>&#125;, &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">102</span>,<span class="hljs-number">85</span>&#125;, &#123;<span class="hljs-string">&quot;Ala&quot;</span>,<span class="hljs-number">333</span>,<span class="hljs-number">92</span>&#125;, &#123;<span class="hljs-string">&quot;Zero&quot;</span>,<span class="hljs-number">101</span>,<span class="hljs-number">70</span>&#125;, &#123;<span class="hljs-string">&quot;Cindy&quot;</span>,<span class="hljs-number">102</span>,<span class="hljs-number">78</span>&#125;&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rule</span> <span class="hljs-comment">// 按分数从大到小排序；若分数相等，则按姓名从小到大排序</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> student &amp; s1, <span class="hljs-type">const</span> student &amp; s2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s1.score != s2.score)<br>            <span class="hljs-keyword">return</span> s1.score &gt; s2.score;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(s1.name, s2.name) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    multiset&lt;student, rule&gt; st;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(students[i]);<br>    multiset&lt;student, rule&gt;::iterator p;<br>    <span class="hljs-keyword">for</span> (p = st.<span class="hljs-built_in">begin</span>(); p != st.<span class="hljs-built_in">end</span>(); p++)<br>        cout &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;id &lt;&lt; endl;<br>    <br>    student s = &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">85</span>&#125;;<br>    p = st.<span class="hljs-built_in">find</span>(s);<br>    <span class="hljs-keyword">if</span> (p != st.<span class="hljs-built_in">end</span>())<br>        cout &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p-&gt;id &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果为：</span><br><span class="hljs-comment">92 Ala 333</span><br><span class="hljs-comment">85 Mary 102</span><br><span class="hljs-comment">78 Cindy 102</span><br><span class="hljs-comment">78 Jack 112</span><br><span class="hljs-comment">70 Zero 101</span><br><span class="hljs-comment">85 Mary 102</span><br><span class="hljs-comment">“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">set&lt;T&gt; st;<br></code></pre></td></tr></table></figure><p>set和multiset的区别在于容器里不能有相同元素（“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立）</p><p>所以，set添加元素可能不成功</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo8</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; st;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        st.<span class="hljs-built_in">insert</span>(a[i]);<br>    cout &lt;&lt; st.<span class="hljs-built_in">size</span>() &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：8</span><br>    set&lt;<span class="hljs-type">int</span>&gt;::iterator i;<br>    <span class="hljs-keyword">for</span> (i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">// 输出结果为：1,2,3,5,6,7,8,12,</span><br>    cout &lt;&lt; endl;<br>    <br>    pair&lt;set&lt;<span class="hljs-type">int</span>&gt;::iterator, <span class="hljs-type">bool</span>&gt; result = st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    pair&lt;T1, T2&gt;数据类型等价于：</span><br><span class="hljs-comment">    struct &#123;</span><br><span class="hljs-comment">    T1 first;</span><br><span class="hljs-comment">    T2 second;</span><br><span class="hljs-comment">    &#125;;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (! result.second) <span class="hljs-comment">// 条件成立说明插入不成功</span><br>        cout &lt;&lt; *result.first &lt;&lt; <span class="hljs-string">&quot; already exists.&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 若插入不成功，则返回指向容器中已存在的相同元素的迭代器</span><br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; *result.first &lt;&lt; <span class="hljs-string">&quot; inserted.&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 若插入成功，则返回指向该元素的迭代器</span><br>    <span class="hljs-comment">// 输出结果为：2 already exists.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">multimap&lt;T1, T2&gt; mp;<br><span class="hljs-comment">// mp里的元素都是如下类型：</span><br><span class="hljs-keyword">struct</span> &#123;<br>    T1 first; <span class="hljs-comment">// 关键字</span><br>    T2 second; <span class="hljs-comment">// 值</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>multimap里的元素按照first从小到大或自定义规则排序，按照first查找</p><h5 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h5><p>一个学生成绩录入和查询系统，接受以下两种输入：<br>Add name id score<br>Query score</p><p>name是个不超过16字符的字符串，中间没有空格，代表学生姓名；id是个整数，代表学号；score是个整数，表示分数。学号不会重复，分数和姓名都可能重复。</p><p>两种输入交替出现。第一种输入表示要添加一个学生的信息，碰到这种输入，就记下学生的姓名、id和分数；第二种输入表示要查询，碰到这种输入，就输出已有记录中分数比score低的最高分获得者的姓名、学号和分数。如果有多个学生都满足条件，就输出学号最大的那个学生的信息。如果找不到满足条件的学生，则输出”Nobody”。</p><p>输入样例：<br>Add Jack 12 78<br>Query 78<br>Query 81<br>Add Percy 9 81<br>Add Marry 8 81<br>Query 82<br>Add Tom 11 79<br>Query 80<br>Query 81</p><p>输出样例：<br>Nobody<br>Jack 12 78<br>Percy 9 81<br>Tom 11 79<br>Tom 11 79</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo9</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span> <span class="hljs-comment">// 使用multimap和map需要此头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StudentInfo</span><br>&#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-type">int</span> score;<br>    StudentInfo info;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> multimap&lt;<span class="hljs-type">int</span>, StudentInfo&gt; MAP_STD;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MAP_STD mp;<br>    Student st;<br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; cmd) &#123;<br>        <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>            cin &gt;&gt; st.info.name &gt;&gt; st.info.id &gt;&gt; st.score;<br>            mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(st.score, st.info));<br>        &#125; <span class="hljs-comment">// make_pair类似函数，生成一个pair&lt;int, StudentInfo&gt;变量，其first等于st.score，second等于st.info</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> score;<br>            cin &gt;&gt; score;<br>            MAP_STD::iterator p = mp.<span class="hljs-built_in">lower_bound</span>(score);<br>            <span class="hljs-keyword">if</span> (p != mp.<span class="hljs-built_in">begin</span>()) &#123;<br>                p--;<br>                score = p-&gt;first; <span class="hljs-comment">// 为什么是-&gt;first而不是-&gt;score，思考“容器”和“迭代器”的关系</span><br>                MAP_STD::iterator maxp = p;<br>                <span class="hljs-type">int</span> maxid = p-&gt;second.id;<br>                <span class="hljs-keyword">for</span> (; p != mp.<span class="hljs-built_in">begin</span>() &amp;&amp; p-&gt;first == score; p--) &#123;<br>                    <span class="hljs-keyword">if</span> (p -&gt; second.id &gt; maxid) &#123;<br>                        maxp = p;<br>                        maxid = p-&gt;second.id;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 如果上面循环是因为p == mp.begin()而终止，则p指向的元素还要处理</span><br>                <span class="hljs-keyword">if</span> (p-&gt;first == score) &#123;<br>                    <span class="hljs-keyword">if</span> (p-&gt;second.id &gt; maxid) &#123;<br>                        maxp = p;<br>                        maxid = p-&gt;second.id;<br>                    &#125;<br>                &#125;<br>                cout &lt;&lt; maxp-&gt;second.name &lt;&lt; <span class="hljs-string">&quot; &quot;</span><br>                     &lt;&lt; maxp-&gt;second.id &lt;&lt; <span class="hljs-string">&quot; &quot;</span><br>                     &lt;&lt; maxp-&gt;first &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;Nobody&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 如果lower_bound的结果就是mp.begin()，说明没人分数比查询分数低</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map和multimap的区别在于容器里不能有关键字重复的元素（“等于”的含义：“a必须在b前面”和“b必须在a前面”都不成立）</p><p>所以，map添加元素可能不成功</p><p>可以使用[ ]，下标为关键字，返回值为first和关键字相同的元素的second</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo10</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    string name;<br>    <span class="hljs-type">int</span> score;<br>&#125;;<br><br>Student students[<span class="hljs-number">5</span>] = &#123;&#123;<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">89</span>&#125;, &#123;<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">74</span>&#125;, &#123;<span class="hljs-string">&quot;Cindy&quot;</span>,<span class="hljs-number">87</span>&#125;, &#123;<span class="hljs-string">&quot;Alysa&quot;</span>,<span class="hljs-number">87</span>&#125;, &#123;<span class="hljs-string">&quot;Micheal&quot;</span>,<span class="hljs-number">98</span>&#125;&#125;;<br><br><span class="hljs-keyword">typedef</span> map&lt;string, <span class="hljs-type">int</span>&gt; MP;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MP mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(students[i].name, students[i].score));<br>    cout &lt;&lt; mp[<span class="hljs-string">&quot;Jack&quot;</span>] &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：89</span><br>    mp[<span class="hljs-string">&quot;Jack&quot;</span>] = <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">for</span> (MP::iterator i = mp.<span class="hljs-built_in">begin</span>(); i != mp.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i-&gt;first &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; i-&gt;second &lt;&lt; <span class="hljs-string">&quot;) &quot;</span>; <span class="hljs-comment">// 输出结果为：(Alysa,87) (Cindy,87) (Jack,60) (Micheal,98) (Tom,74) </span><br>    cout &lt;&lt; endl;<br>    Student st;<br>    st.name = <span class="hljs-string">&quot;Jack&quot;</span>;<br>    st.score = <span class="hljs-number">99</span>;<br>    pair&lt;MP::iterator, <span class="hljs-type">bool</span>&gt; p = mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(st.name, st.score));<br>    <span class="hljs-keyword">if</span> (p.second)<br>        cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; p.first-&gt;first &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; p.first-&gt;second &lt;&lt; <span class="hljs-string">&quot;) inserted&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;insertion failed&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-comment">// 输出结果为：insertion failed</span><br>    mp[<span class="hljs-string">&quot;Harry&quot;</span>] = <span class="hljs-number">78</span>; <span class="hljs-comment">// 插入一元素，其first为&quot;Harry&quot;，然后将其second改为78</span><br>    MP::iterator q = mp.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;Harry&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; q-&gt;first &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; q-&gt;second &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl; <span class="hljs-comment">// 输出结果为：(Harry,78)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h5><p>输入大量单词，每个单词一行，不超过20字符，没有空格。按出现次数从多到少输出这些单词及其出现次数。出现次数相同的，字典序靠前的在前面。</p><p>输入样例：<br>this<br>is<br>ok<br>this<br>plus<br>that<br>is<br>plus<br>plus</p><p>输出样例：<br>plus 3<br>is 2<br>this 2<br>ok 1<br>that 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo11</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Word</span><br>&#123;<br>    <span class="hljs-type">int</span> times;<br>    string wd;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rule</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">const</span> Word &amp; w1, <span class="hljs-type">const</span> Word &amp; w2)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (w1.times != w2.times)<br>            <span class="hljs-keyword">return</span> w1.times &gt; w2.times;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> w1.wd &lt; w2.wd; <span class="hljs-comment">// 有#include &lt;string&gt;的头文件，可以直接比较</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    set&lt;Word, Rule&gt; st;<br>    map&lt;string, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; s)<br>        mp[s]++; <span class="hljs-comment">// 当map元素值为int类型或者常量时候，默认值为0</span><br>    <span class="hljs-keyword">for</span> (map&lt;string, <span class="hljs-type">int</span>&gt;::iterator i = mp.<span class="hljs-built_in">begin</span>(); i != mp.<span class="hljs-built_in">end</span>(); i++) &#123;<br>        Word tmp;<br>        tmp.wd = i-&gt;first;<br>        tmp.times = i-&gt;second;<br>        st.<span class="hljs-built_in">insert</span>(tmp);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (set&lt;Word, Rule&gt;::iterator i = st.<span class="hljs-built_in">begin</span>(); i != st.<span class="hljs-built_in">end</span>(); i++)<br>        cout &lt;&lt; i-&gt;wd &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i-&gt;times &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
